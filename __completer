# completer interface

# Local variables:
# mode: shell-script
# sh-basic-offset: 2
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=2 sw=2 et filetype=sh

COMPLETION_TOOL=bash-completer
__completer() {
  # set -x
  COMPREPLY=()
  local argc=${COMP_CWORD}
  local cur=${COMP_WORDS[$argc]}
  local prev=${COMP_WORDS[$argc-1]}
  local program=${COMP_WORDS[0]}
  local values=
  local optionCompleted=1

  #echo -e "\nArgs=[$@]\nProgram: [$program]\nPrev - Cur = [$prev] - [$cur]"

  # Get the completion for the option
  if [[ $prev == -* ]]
  then
    nextValues=$($COMPLETION_TOOL --program $program --complete $prev)

    # Authorize comma-separated list only for option values
    lastValue=$(echo $cur | sed -e 's/^.*,//')
    local validValues=${cur%$lastValue}
    for value in $nextValues
    do
      values="$values ${validValues}${value}"
    done

    completionCode=$?
    optionCompleted=0
  fi

  if [[ $optionCompleted = 1 ]] || [[ $completionCode > 2 ]]
  then
  # There is no completion for the option
    case $cur in
    -*) values=$($COMPLETION_TOOL --program $program --complete-options) ;;
    *) values=$($COMPLETION_TOOL --program $program --complete-actions) ;;
    esac
  fi

  COMPREPLY=( $( compgen -W "$values" -- $cur ) )

  # set +x
  return 0
}

# Scripts to complete
complete -F __completer $COMPLETION_TOOL # program:completer

PROGRAM_FILE="$HOME/.bash-completer/__registered-programs"
[ -e $PROGRAM_FILE ] && source $PROGRAM_FILE
