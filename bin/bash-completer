#!/usr/bin/env bash

#echo -e "Call to $0 with [$@]"

readonly longOptions="program:,list\
,register:,unregister:\
,record:,record-options,record-actions\
,complete:,complete-actions,complete-options\
,get:,get-options,get-actions\
,version,help"
readonly shortOptions='v,h'

convertOptions() {
  local readonly prefix="$1"
  local value="$2"
  [ -z $value ] && return

  value="${value//::,/ $prefix}"
  value="${value//:,/ $prefix}"
  value="${value//,/ $prefix}"

  echo "${prefix}${value}"
}

__complete__options() {
  local readonly stream="$1"
  [ $stream -nt "$(which $0)" ] && return 0

  convertOptions '--' $longOptions
  convertOptions '-' $shortOptions

  return 1
}

source "$HOME/.bash-completer/lib/completer-util.sh"
source "$HOME/.bash-completer/completer-lib.sh"

printHelp() {
  cat <<HELP
Usage: $0 [options] [action]

There is no particular action for the util.
Depending on the options given, it will run the appropriate action, such as --help or --version does.

Actions:
  -h, --help: prints this message
  -v, --version: prints the version of bash-completer

  --list: list all programs registered to the completion process

  --get OPTION: for a name program, get the completion for the given OPTION
  --get-options: for a name program, get the completion of options
  --get-actions: for a name program, get the completion of actions

  --complete OPTION: for a name program, fetch the completion for the given OPTION
  --complete-options: for a name program, fetch the completion of options
  --complete-actions: for a name program, fetch the completion of actions

  --register NAME: register NAME (assumed to be an executable) for completion
  --unregister NAME: unregister NAME of completion process

Options:
  --program NAME: define the program to manage
HELP
}

readonly args=$(getopt -s bash -o "$shortOptions" -l "$longOptions" -- "$@")
if [ $? -ne 0 ]
then
  echo -e "\e[031mError on parameters\e[0m"
  exit 1
fi

# parse option
eval set -- "$args"

while true
do
  option="$1"
  shift 1
  case $option in
    # environment
    --program)
      program="$1"
      shift 1 ;;
    --[a-z]*-[a-z]*)
      mode=${option%-[a-z]*}
      mode=${mode#--}
      context="__${option//--[a-z]*-/}" ;;
    --[a-z]*)
      mode=${option#--}
      [[ $longOptions == *$mode:* ]] && context="$1" && shift 1
      ;;
    -[a-zA-Z])
      mode=${option#-}
      [[ $shortOptions == *$mode:* ]] && context="$1" && shift 1
      ;;
    # end of loop and errors
    --) break ;;
    *) echo "Invalid option $option"
  esac
done

# parse values
case $mode in
  h|help)
    printHelp ;;
  v|version)
    printVersion ;;
  list)
    listRecordedPrograms ;;
  record)
    record $program $context "$@" ;;
  complete)
    doCompletion $program $context ;;
  get)
    getCompletion $program $context ;;
  register) register $context;;
  unregister) unregister $context;;
  *)
    echo "Error: invalid mode '$mode'"
    exit 2;
esac

exit 0
